import AsciiPlistParser

{% for type in types.implementing.AutoPbxSubscript|class %}
// MARK: {{ type.name }}
extension {{ type.name }} {
{% for t in type.containedTypes %}
{% if t.kind == "enum" %}
    {% if t.name|hasSuffix:".StringField" %}
    subscript(field: StringField) -> String {
        set(newValue) {
            if let keyref = object.keyRef(for: field.rawValue) {
                let existing = object[keyref] as! StringValue
                existing.value = newValue
                object[keyref] = existing
            } else {
                let keyref = KeyRef(value: field.rawValue, annotation: nil)
                let stringValue = StringValue(value: newValue, annotation: nil)
                object[keyref] = stringValue
            }
        }
        get {
            return object.string(for: field.rawValue)!
        }
    }
    {% endif %}
    {% if t.name|hasSuffix:".ArrayField" %}
    subscript(field: ArrayField) -> [StringValue] {
        set(newValue) {
            if let keyref = object.keyRef(for: field.rawValue) {
                let existing = object[keyref] as! ArrayValue
                existing.value = newValue
                object[keyref] = existing
            } else {
                let keyref = KeyRef(value: field.rawValue, annotation: nil)
                object[keyref] = ArrayValue(value: newValue)
            }
        }
        get {
            return object.arrayValue(for: field.rawValue)!.value
        }
    }
    {% endif %}
    {% if t.name|hasSuffix:".ObjectField" %}
    subscript(field: ObjectField) -> Object {
        set(newValue) {
            let keyref = object.keyRef(for: field.rawValue)!
            object[keyref] = newValue
        }
        get {
            return object.object(for: field.rawValue)!
        }
    }
    {% endif %}
    {% if t.name|hasSuffix:".OptionalStringField" %}
    subscript(field: OptionalStringField) -> String? {
        set(newValue) {
            if let keyref = object.keyRef(for: field.rawValue) {
                if let newValue = newValue {
                    let existing = object[keyref] as! StringValue
                    existing.value = newValue
                    object[keyref] = existing
                } else {
                    object[keyref] = nil
                }
            } else {
                let keyref = KeyRef(value: field.rawValue, annotation: nil)
                if let newValue = newValue {
                    object[keyref] = StringValue(value: newValue, annotation: nil)
                } else {
                    object[keyref] = nil
                }
            }
        }
        get {
            return object.string(for: field.rawValue)
        }
    }
    {% endif %}
    {% if t.name|hasSuffix:".OptionalArrayField" %}
    subscript(field: OptionalArrayField) -> [StringValue]? {
        set(newValue) {
            if let keyref = object.keyRef(for: field.rawValue) {
                if let newValue = newValue {
                    let existing = object[keyref] as! ArrayValue
                    existing.value = newValue
                    object[keyref] = existing
                } else {
                    object[keyref] = nil
                }
            } else {
                let keyref = KeyRef(value: field.rawValue, annotation: nil)
                if let newValue = newValue {
                    object[keyref] = ArrayValue(value: newValue)
                } else {
                    object[keyref] = nil
                }
            }
        }
        get {
            return object.arrayValue(for: field.rawValue)?.value
        }
    }
    {% endif %}
    {% if t.name|hasSuffix:".OptionalObjectField" %}
    subscript(field: OptionalObjectField) -> Object? {
        set(newValue) {
            if let keyref = object.keyRef(for: field.rawValue) {
                object[keyref] = newValue
            } else {
                let keyref = KeyRef(value: field.rawValue, annotation: nil)
                object[keyref] = newValue
            }
        }
        get {
            return object.object(for: field.rawValue)
        }
    }
    {% endif %}

    {% for c in t.cases %}
    {% if c.name != "nop" %}
    {% if t.name|hasSuffix:".StringField" %}
    public var {{ c.name }}: String {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% if t.name|hasSuffix:".ArrayField" %}
    public var {{ c.name }}: [StringValue] {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% if t.name|hasSuffix:".ObjectField" %}
    public var {{ c.name }}: Object {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% if t.name|hasSuffix:".ObjectsReferencingField" %}
    {% if type.implements.ObjectsReferencing %}
    public var {{ c.name }}: {{ c.name|upperFirst }} {
        let id = object.string(for: "{{ c.name }}")!
        return {{ c.name|upperFirst }}(object: objects.object(for: id)!, objects: objects)
    }
    {% endif %}
    {% endif %}
    {% if t.name|hasSuffix:".GroupReferencingField" %}
    {% if type.implements.ObjectsReferencing %}
    public var {{ c.name }}: Group {
        let id = object.string(for: "{{ c.name }}")!
        return Group(object: objects.object(for: id)!, objects: objects)
    }
    {% endif %}
    {% endif %}
    {% if t.name|hasSuffix:".OptionalGroupReferencingField" %}
    {% if type.implements.ObjectsReferencing %}
    public var {{ c.name }}: Group? {
        guard let id = object.string(for: "{{ c.name }}") else {
            return nil
        }
        return Group(object: objects.object(for: id)!, objects: objects)
    }
    {% endif %}
    {% endif %}
    {% if t.name|hasSuffix:".FileReferencingField" %}
    {% if type.implements.ObjectsReferencing %}
    public var {{ c.name }}: FileReference {
        let id = object.string(for: "{{ c.name }}")!
        return FileReference(object: objects.object(for: id)!, objects: objects)
    }
    {% endif %}
    {% endif %}
    {% if t.name|hasSuffix:".OptionalFileReferencingField" %}
    {% if type.implements.ObjectsReferencing %}
    public var {{ c.name }}: FileReference? {
        guard let id = object.string(for: "{{ c.name }}") else {
            return nil
        }
        return FileReference(object: objects.object(for: id)!, objects: objects)
    }
    {% endif %}
    {% endif %}
    {% if t.name|hasSuffix:".OptionalStringField" %}
    public var {{ c.name }}: String? {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% if t.name|hasSuffix:".OptionalArrayField" %}
    public var {{ c.name }}: [StringValue]? {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% if t.name|hasSuffix:".OptionalObjectField" %}
    public var {{ c.name }}: Object? {
        get { return self[.{{ c.name }}] }
        set(newValue) { self[.{{ c.name }}] = newValue }
    }
    {% endif %}
    {% endif %}
    {% endfor %}

{% endif %}
{% endfor %}
}
{% endfor %}
